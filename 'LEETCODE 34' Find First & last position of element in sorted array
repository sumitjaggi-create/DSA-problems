class Solution {
public:
    int RightMostBound(vector<int>& nums, int target) {

        // performing binary search in right side

        int index = -1, st = 0, end = nums.size() - 1;

        while (st <= end) {
            int mid = st + (end - st) / 2;

            if (nums[mid] == target) {
                index = mid;
                st = mid + 1; // after finding target first time then it will to
                              // left to find whether it is thre or not
                else if (nums[mid] < target) {
                    st = mid + 1;
                }
                else {
                    end = mid - 1;
                }
            }
            return index;
        }

        int LeftMostBound(vector<int> & nums, int target) {

            // performing binary search in left side

            int index = -1, st = 0, end = nums.size() - 1;

            while (st <= end) {
                int mid = st + (end - st) / 2;

                if (nums[mid] == target) {
                    index = mid;
                    end =
                        mid - 1; // after finding target first time then it will
                                 // to left to find whether it is thre or not
                } else if (nums[mid] > target) {
                    end = mid - 1;
                } else {
                    st = mid + 1;
                }
            }
            return index;
        }
        vector<int> searchRange(vector<int> & nums, int target) {

            // using binary search

            int right = RightMostBound(nums, target);
            int left = LeftMostBound(nums, target);

            vector<int> ans;
            ans.push_back(left);
            ans.push_back(right);
            return ans;
        }
    };
