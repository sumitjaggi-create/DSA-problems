class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        if(intervals.empty()) return {};

        // Step 1: Sort intervals based on starting point
        sort(intervals.begin(), intervals.end());

        vector<vector<int>> ans;
        ans.push_back(intervals[0]);  // initialize with first interval

        for(int i = 1; i < intervals.size(); i++) {
            // If current interval overlaps with last interval in ans
            if(intervals[i][0] <= ans.back()[1]) {
                ans.back()[1] = max(ans.back()[1], intervals[i][1]); // merge
            } else {
                ans.push_back(intervals[i]); // no overlap, add as new
            }
        }

        return ans;
    }
};
