class Solution {
public:
    void merge(vector<int>& nums, int st, int end, int mid) {
        vector<int> temp;
        int i = st, j = mid + 1;

        while (i <= mid && j <= end) {
            if (nums[i] <= nums[j]) {
                temp.push_back(nums[i]);
                i++;
            } else {
                temp.push_back(nums[j]);
                j++;
            }
        }

        while (i <= mid) {
            temp.push_back(nums[i]);
            i++;
        }
        while (j <= end) {
            temp.push_back(nums[j]);
            j++;
        }

        for (int index = 0; index < temp.size(); index++) {
            nums[index + st] = temp[index];
        }
    }

    int countPairs(vector<int>& nums, int st, int mid, int end) {
        int right = mid + 1;
        int count = 0;
        for (int i = st; i <= mid; i++) {
            while (right <= end && (long long)nums[i] > 2LL * nums[right])
                right++;

            count = count + (right - (mid + 1));
        }
        return count;
    }

    int mergeSort(vector<int>& nums, int st, int end) {
        if (st < end) {

            int mid = st + (end - st) / 2;

            int count1 = mergeSort(nums, st, mid);
            int count2 = mergeSort(nums, mid + 1, end);
            int count3 = countPairs(nums, st, mid, end);
            merge(nums, st, end, mid);

            return count1 + count2 + count3;
        }
        return 0;
    }
    int reversePairs(vector<int>& nums) {

        int ans = mergeSort(nums, 0, nums.size() - 1);
        return ans;
    }
};
